{
  "_args": [
    [
      {
        "raw": "sugar",
        "scope": null,
        "escapedName": "sugar",
        "name": "sugar",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\mownamasse\\Documents\\node-v6.10.3"
    ]
  ],
  "_from": "sugar@latest",
  "_id": "sugar@2.0.4",
  "_inCache": true,
  "_location": "/sugar",
  "_nodeVersion": "5.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sugar-2.0.4.tgz_1479919152281_0.7113703608047217"
  },
  "_npmUser": {
    "name": "l_andrew_l",
    "email": "plummer.andrew@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sugar",
    "scope": null,
    "escapedName": "sugar",
    "name": "sugar",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/sugar/-/sugar-2.0.4.tgz",
  "_shasum": "79a6fa4dabc587fb855a52ee7176dd042bf757b0",
  "_shrinkwrap": null,
  "_spec": "sugar",
  "_where": "C:\\Users\\mownamasse\\Documents\\node-v6.10.3",
  "author": {
    "name": "Andrew Plummer",
    "email": "plummer.andrew@gmail.com"
  },
  "browser": {
    "buffer": false
  },
  "bugs": {
    "url": "https://github.com/andrewplummer/Sugar/issues"
  },
  "dependencies": {
    "sugar-core": "^2.0.0"
  },
  "description": "A Javascript utility library for working with native objects.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "79a6fa4dabc587fb855a52ee7176dd042bf757b0",
    "tarball": "https://registry.npmjs.org/sugar/-/sugar-2.0.4.tgz"
  },
  "engines": {
    "node": ">= 0.8.23"
  },
  "gitHead": "023fc66e77c7a08cb9ac73c01f51f44d6eee296e",
  "homepage": "https://sugarjs.com/",
  "icon": "https://sugarjs.com/icon.svg",
  "keywords": [
    "sugar",
    "sugarjs",
    "functional",
    "browser",
    "utility",
    "util",
    "date",
    "time",
    "polyfill"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "l_andrew_l",
      "email": "plummer.andrew@gmail.com"
    }
  ],
  "name": "sugar",
  "optionalDependencies": {},
  "readme": "# Sugar\n\n[![Build Status](https://travis-ci.org/andrewplummer/Sugar.svg)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\n\n---------------------------------------\n\n- [**Install**](#install)\n- [**Upgrading**](#upgrading)\n- [**Getting Started**](#getting-started)\n- [**Documentation**](#documentation)\n- [**Custom Builds**](#custom-builds)\n- [**Browser**](#browser)\n- [**npm**](#npm)\n- [**Modules**](#modules)\n- [**Date Locales**](#date-locales)\n- [**Timezones**](#timezones)\n- [**Defining Methods**](#defining-methods)\n- [**Plugins**](#plugins)\n- [**Contributing**](#contributing)\n- [**Road Map**](#road-map)\n\n---------------------------------------\n\n\n# v2.0.2\n\n### [sugar.js](https://raw.githubusercontent.com/andrewplummer/Sugar/2.0.2/dist/sugar.js) | [sugar.min.js (24kb gz)](https://raw.githubusercontent.com/andrewplummer/Sugar/2.0.2/dist/sugar.min.js)\n\n\n## Install\n\n#### `npm install sugar`\n#### `bower install sugar`\n\n\n## Upgrading\n\nIf you are upgrading from v1, there is now an upgrade [helper script](https://sugarjs.com/upgrading)\navailable that makes upgrading easier by warning you about breaking changes as\nyour code is run. The [CAUTIONLOG](CAUTION.md) is also available, which is a\nvetted changelog showing breaking changes in order of severity.\n\n\n## Getting Started\n\n#### [https://sugarjs.com/quickstart/](https://sugarjs.com/quickstart/)\n\n\n## Documentation\n\n#### [https://sugarjs.com/docs/](https://sugarjs.com/docs/)\n\n\n## Custom Builds\n\n#### [https://sugarjs.com/download/](https://sugarjs.com/download/)\n\nCustom browser builds can be created on the site download page. In addition,\ntools like Browserify can also be used to create custom builds, as npm packages\nare now fully modular. The main repo also has tasks to create custom builds as\nwell. Simply clone, run `npm install` then `gulp`.\n\n\n## Browser\n\nThe `dist` directory holds builds that are ready to be loaded in the browser.\nThese builds include the `core` module, and so have no dependencies. Bower\npackages at the moment include only this directory. Use the `es5` builds if you\nrequire support for environments that do not support ES5 natively (IE8 and below).\n\n\n## npm\n\nThe `sugar` npm package allows methods as well as entire modules to be required\nindividually. If you are using a build tool like Browserify, this will make it\nsimple to create smaller custom builds without going through the download page.\nAll packages also include pre-built distributions in the `dist/` directory.\n\nIn addition to the main `sugar` package, there are also packages separated by\nSugar module, i.e. `sugar-date`, `sugar-array`, etc.\n\nWhen an entry point is required (the package name or an entire module), it will\nreturn a reference to `Sugar`, which is equivalent to the global object in the\nbrowser. All methods will be defined on this object and can be called as normal.\nRequiring an individual method will define it on `Sugar` and additionally return\na reference to its static form that can be called immediately:\n\n```javascript\n// Require all modules\nvar Sugar = require('sugar');\nSugar.Number.round(3.1415);\n\n// Require the Number module\nvar Sugar = require('sugar/number');\nSugar.Number.round(3.1415);\n\n// Require only the \"round\" method\nvar round = require('sugar/number/round');\nround(3.1415);\n```\n\nAs the npm package is designed with node in mind, polyfills must be explicitly\nrequired (the `sugar` entry point will not include them), and will immediately\napply themselves if the methods they polyfill are missing.\n\n```javascript\n// Require and apply ES6 polyfills\nrequire('sugar/polyfills/es6');\n```\n\nSimilarly, date locales must be explicitly required as well:\n```javascript\n// Require the Japanese date locale\nrequire('sugar/locales/ja');\n// Require all date locales\nrequire('sugar/locales');\n```\n\n\nAll Sugar npm packages are dependent on the `sugar-core` package.\n\n## Modules\n\nAlthough Sugar builds can now be customized at method level, modules are still\nused as an intuitive way of grouping similar methods. Sugar npm packages make\nuse of modules, both in the main `sugar` package as well as individual module\npackages beginning with `sugar-`. The following modules are available:\n\n#### Default:\n\n- [ES6](lib/es6.js) (Polyfills)\n- [ES7](lib/es7.js) (Polyfills)\n- [Array](lib/array.js)\n- [Date](lib/date.js)\n- [Enumerable](lib/enumerable.js) (shared methods on Array and Object)\n- [Function](lib/function.js)\n- [Number](lib/number.js)\n- [Object](lib/object.js)\n- [Range](lib/range.js) (String, Number, and Date ranges)\n- [RegExp](lib/regexp.js)\n- [String](lib/string.js)\n\n#### Non-default:\n\n- [ES5](lib/es5.js) (Polyfills, adds IE6-8 Support)\n- [Language](lib/language.js) (Character conversion and script detection)\n- [Inflections](lib/inflections.js) (Pluralization and string normalization)\n\nNon-default modules are excluded from the main Sugar build, but can be added by\ncreating a [custom build](#custom-builds). The main npm package includes the ES5\nmodule, polyfills are disabled by default and must be explicitly required.\nOther non-default modules can be found individually (i.e. `sugar-language`, etc).\n\n## Date Locales\n\nLocale definition files are in the [locales](locales/) directory. They can be\nsimply included as-is after Sugar is loaded, or built together using\n[custom builds](#custom-builds). English is included by default and required by\nthe Date module. Currently available locales are:\n\n- [Catalan (ca)](locales/ca.js)\n- [Danish (da)](locales/da.js)\n- [Dutch (nl)](locales/nl.js)\n- [Finnish (fi)](locales/fi.js)\n- [French (fr)](locales/fr.js)\n- [German (de)](locales/de.js)\n- [Italian (it)](locales/it.js)\n- [Japanese (ja)](locales/ja.js)\n- [Korean (ko)](locales/ko.js)\n- [Norwegian (no)](locales/no.js)\n- [Polish (pl)](locales/pl.js)\n- [Portuguese (pt)](locales/pt.js)\n- [Russian (ru)](locales/ru.js)\n- [Spanish (es)](locales/es.js)\n- [Swedish (sv)](locales/sv.js)\n- [Simplified Chinese (zh-CN)](locales/zh-CN.js)\n- [Traditional Chinese (zh-TW)](locales/zh-TW.js)\n\n#### Adding/Customizing Locales\n\nIf a locale or format is missing, it can easily be added by modifying or adding\nthe definition. See [here](https://sugarjs.com/docs/#/DateLocales) for more on\nthis. Please consider contributing any changes made back to the community!\n\n\n## Timezones\n\nSugar does not deal with timezone abbreviations (i.e. \"PST\", etc). Timezone\noffsets will be correctly parsed if they are in ISO-8601 format (+09:00, +0900,\nor Z for UTC), however if an abbreviation exists it will be ignored. Sugar\nhowever plays nicely with other libraries that offer full timezone support such\nas [timezone.js](https://github.com/mde/timezone-js).\n\n`Date.create` allows two options for dealing with UTC dates. `fromUTC` will\nparse the string as UTC, but return a normal date. In contrast, `setUTC` tells\nSugar to use methods like `getUTCHours` when handling the date, and is usually\nused when the date needs to be formatted as UTC. Native methods like `getHours`\nstill return local values.\n\n## Defining Methods\n\nSugar now makes it easy to define your own methods. This is aimed at developers\nhoping to release their own plugins with Sugar. After defining methods, they can\nbe extended or used as chainables just like other methods:\n\n```javascript\nSugar.Number.defineStatic('randomish', function () {\n  if (Math.random() > .5) {\n    return Math.random();\n  } else {\n    return 1;\n  }\n});\n\nSugar.Number.defineInstance({\n  'square': function (n) {\n    return n * n;\n  },\n  'cube': function (n) {\n    return n * n * n;\n  }\n});\n\nSugar.Number.square(3);         // 9\nnew Sugar.Number(5).cube().raw; // 125\nSugar.Number.randomish()        // ???\n\nSugar.extend();\n(2).square();       // 4\n(4).cube();         // 64\nNumber.randomish(); // ???\n\n```\n\nSee the [docs](https://sugarjs.com/docs/#/Sugar) for options and other helpers.\n\n## Plugins\n\nIf you are defining methods that are useful to the general public, please consider\nreleasing them as a Sugar plugin! Refer to the\n[plugin boilerplate](https://github.com/andrewplummer/sugar-plugin-boilerplate)\nrepo for an example to get started.\n\n## Contributing\n\nIf you would like to issue a pull request, please first consider adding well\nformed [unit tests](test/tests/). These tests can be run directly in the browser\nfrom the [test/browser/](test/browser/) directory or in node with `npm test`.\n\n## Road Map\n\nProposals for core features or major method changes will be added to the\n[road map](https://github.com/andrewplummer/Sugar/wiki/Road-Map). New methods\nmay or may not be accepted, depending on their utility. Generally, they will\nfirst be delegated to plugins that may eventually be added to the main library\nwhen they reach a certain stage of popularity.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andrewplummer/Sugar.git"
  },
  "scripts": {},
  "typings": "sugar.d.ts",
  "version": "2.0.4"
}
